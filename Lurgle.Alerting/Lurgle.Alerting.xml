<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lurgle.Alerting</name>
    </assembly>
    <members>
        <member name="T:Lurgle.Alerting.Alert">
            <summary>
                Send an alert with Lurgle.Alerting
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.Attachments">
            <summary>
                List of attachments
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.BccAddresses">
            <summary>
                List of BCC addresses
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.CcAddresses">
            <summary>
                List of CC addresses
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.AlternateView">
            <summary>
                Alternate view for email
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.FromAddress">
            <summary>
                From address
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.IsHtml">
            <summary>
                Is email HTML?
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.AlertPriority">
            <summary>
                Email priority
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.ReplyToAddress">
            <summary>
                Email reply to
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.AlertSubject">
            <summary>
                Email subject
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.ToAddresses">
            <summary>
                List of To addresses
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.IsMethod">
            <summary>
                Add method to body?
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alert.MethodName">
            <summary>
                Calling method name
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Alert.To(System.String,System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Add a single recipient email address to the alert. You can chain this multiple times.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email.
                <para />
                You can optionally supply key names to retrieve email addresses from the app config.
            </summary>
            <param name="toAddress">
                Email address to send the email to. Comma- and semicolon-delimited lists can be parsed, but
                toName will then be ignored.
            </param>
            <param name="toName">
                Display name of the recipient. Will be ignored if a comma- or semicolon-delimited toAddress is
                passed
            </param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.To(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add an array of email addresses to the recipient field for the alert.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses in array form</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.To(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Add a list of paired email address and name values to the recipient field for the alert.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses and display names as a Dictionary of Key = string, Value = string</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Cc(System.String,System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Add a single CC  address to the alert. You can chain this multiple times.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email.
            </summary>
            <param name="ccAddress">
                Email address to send the email to. Comma- and semicolon-delimited lists can be parsed, but
                toName will then be ignored.
            </param>
            <param name="ccName">
                Display name of the recipient. Will be ignored if a comma- or semicolon-delimited toAddress is
                passed
            </param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Cc(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add an array of email addresses to the CC field for the alert
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses in array form</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Cc(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Add a list of paired email address and name values to the CC field for the alert
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses and display names as a Dictionary of Key = string, Value = string</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Bcc(System.String,System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Add a single BCC address to the alert. You can chain this multiple times.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email.
            </summary>
            <param name="bccAddress">
                Email address to send the email to. Comma- and semicolon-delimited lists can be parsed, but
                toName will then be ignored.
            </param>
            <param name="bccName">
                Display name of the recipient. Will be ignored if a comma- or semicolon-delimited toAddress is
                passed
            </param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Bcc(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add an array of email addresses to the BCC field for this alert
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses in array form</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Bcc(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Add a list of paired email address and name values to the <see cref="P:Lurgle.Alerting.Alert.BccAddresses" /> field for the alert
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses and display names as a Dictionary of Key = string, Value = string</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.ReplyTo(System.String,System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Set the Reply To address for the alert.
                <para />
                If no address is specified, <see cref="P:Lurgle.Alerting.AlertConfig.MailFrom" /> value will be used.
            </summary>
            <param name="replyToAddress">Email address to send replies to.</param>
            <param name="replyToName">Display name of the recipient.</param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Subject(System.String,System.Object[])">
            <summary>
                Set the subject for the alert email.
                <para />
                Passing an empty subjectText will use the <see cref="P:Lurgle.Alerting.AlertConfig.MailSubject" /> .
            </summary>
            <param name="subjectText">Subject to use for the email</param>
            <param name="args">Optional arguments for string replacement"</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Priority(Lurgle.Alerting.AlertLevel)">
            <summary>
                Set the Priority for the alert email.
                <para />
                Emails default to <see cref="F:Lurgle.Alerting.AlertLevel.Normal" />
            </summary>
            <param name="alertLevel">The priority that this email should be sent with</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.SetHtml(System.Boolean)">
            <summary>
                Sets the current email to HTML if true (default).
                Shouldn't be needed any more since we have HTML and alternate text implementations.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.AddAlternateView(System.String,System.Collections.Generic.List{System.Net.Mail.LinkedResource})">
            <summary>
                Add the Alt view for the HTML contents.
                Shouldn't be needed any more since we have HTML and alternate text implementations.
            </summary>
            <param name="messageBody"> Message body as string</param>
            <param name="linkedResourceList">List of linked resources</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Attach(System.String,System.String)">
            <summary>
                Attach a file to the alert. You can chain this multiple times.
                <para />
                If the file does not exist, it will be ignored
            </summary>
            <param name="filePath">Path to the file</param>
            <param name="contentType">ContentType, if known (optional)</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Attach(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Attach an array of files to the alert
                <para />
                If any file does not exist, it will be ignored
            </summary>
            <param name="fileList">Array of paths to files that will be attached</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Attach(System.IO.Stream,System.String,System.String)">
            <summary>
                Attach a file opened as a stream to the alert
            </summary>
            <param name="fileStream"></param>
            <param name="fileName"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.AttachInline(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Attach an array of files to the alert as inline attachments
                <para />
                If any file does not exist, it will be ignored
            </summary>
            <param name="fileList">Array of paths to files that will be attached</param>
            <param name="folderLocation">Path to folder containing files</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Send(System.String,System.Object[])">
            <summary>
                Send the alert with the specified message text - assumes plain text
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.SendAsync(System.String,System.Object[])">
            <summary>
                Send the alert with the specified message text - assumes plain text
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.Get(System.String,System.Object[])">
            <summary>
                Return a rendered alert email with the specified message text - assumes plain text
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.SendHtml(System.String,System.String,System.Object[])">
            <summary>
                Send the alert with the specified message text and alternate body
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="altMsg">Alternate text body. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.SendHtmlAsync(System.String,System.String,System.Object[])">
            <summary>
                Send the alert with the specified message text and alternate body
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="altMsg">Alternate text body. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.GetHtml(System.String,System.String,System.Object[])">
            <summary>
                Return a rendered alert email with the specified message text and alternate body
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="altMsg">Alternate text body. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.SendTemplate``1(System.String,``0,System.Boolean,System.String)">
            <summary>
                Send the alert using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template and model
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template">Body of the email, using selected <see cref="T:Lurgle.Alerting.RendererType" /> template format and model</param>
            <param name="templateModel">The Model to apply to this template</param>
            <param name="isHtml"></param>
            <param name="alternateTemplate">Alternate text template</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.SendTemplateAsync``1(System.String,``0,System.Boolean,System.String)">
            <summary>
                Send the alert using selected <see cref="T:Lurgle.Alerting.RendererType" /> template and model
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template">Body of the email, using selected <see cref="T:Lurgle.Alerting.RendererType" /> template format</param>
            <param name="templateModel">The Model to apply to this template</param>
            <param name="isHtml"></param>
            <param name="alternateTemplate">Alternate text template</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.GetTemplate``1(System.String,``0,System.Boolean,System.String)">
            <summary>
                Return a rendered alert email using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template and model
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template">Body of the email, using selected <see cref="T:Lurgle.Alerting.RendererType" /> template format and model</param>
            <param name="templateModel">The Model to apply to this template</param>
            <param name="isHtml"></param>
            <param name="alternateTemplate">Alternate text template</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.SendTemplateFile``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
                Send the alert using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file and model
                <para />
                This does not check for the file existence, so a non-existent config item or missing file will cause an exception
                that can be caught.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="templateConfig">Config item to load for the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file</param>
            <param name="templateModel">The Model to apply to this  template</param>
            <param name="isHtml"></param>
            <param name="alternateText">Render the text version of your template as an alternate text</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.SendTemplateFileAsync``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
                Send the alert using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template (as configured in the application config)
                and model
                <para />
                This does not check for the file existence, so a non-existent config item or missing file will cause an exception
                that can be caught.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="templateConfig">Config item to load for the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file</param>
            <param name="templateModel">The Model to apply to this  template</param>
            <param name="isHtml"></param>
            <param name="alternateText">Render the text version of your template as an alternate text</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.GetTemplateFile``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
                Return a rendered alert email using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file and model
                <para />
                This does not check for the file existence, so a non-existent config item or missing file will cause an exception
                that can be caught.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="templateConfig">Config item to load for the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file</param>
            <param name="templateModel">The Model to apply to this  template</param>
            <param name="isHtml"></param>
            <param name="alternateText">Render the text version of your template as an alternate text</param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.GetEnvelopeWithBody(System.String,System.Boolean,System.String,System.Object[])">
            <summary>
                Return an envelope with the specified body
            </summary>
            <param name="msg"></param>
            <param name="isHtml"></param>
            <param name="altMsg"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.GetEnvelopeWithTemplate``1(System.String,``0,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
                Return an envelope using the specified template
            </summary>
            <param name="templateConfig"></param>
            <param name="templateModel"></param>
            <param name="isFile"></param>
            <param name="isHtml"></param>
            <param name="alternateText"></param>
            <param name="alternateBody"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.GetEnvelope">
            <summary>
                Get an envelope without a body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.GetDomains">
            <summary>
                Parse email domains from envelope
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.AddAttachment(System.String,System.String,System.String,System.Boolean)">
            <summary>
                Add an attachment to the envelope
            </summary>
            <param name="filePath"></param>
            <param name="contentType"></param>
            <param name="contentId"></param>
            <param name="isInline"></param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.AddAttachment(System.IO.Stream,System.String,System.String)">
            <summary>
                Add an attachment stream to the envelope
            </summary>
            <param name="fileStream"></param>
            <param name="fileName"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.ClearAttachments">
            <summary>
                Close any open file streams and clear the list
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Alert.GetInlineFile(System.String,System.String,System.String@,System.String@,System.String@)">
            <summary>
                Retrieve the configured <see cref="T:Lurgle.Alerting.SenderType" /> with settings applied
            </summary>
            <returns></returns>
            <summary>
                Retrieve a file spec for attachment as an inline file
            </summary>
            <param name="inlineFile"></param>
            <param name="folderLocation"></param>
            <param name="contentId"></param>
            <param name="filePath"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Lurgle.Alerting.Alert.ToAddressList(System.String,System.String)">
            <summary>
                Return a list of valid email addresses
            </summary>
            <param name="emailValue"></param>
            <param name="toName"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.From(System.String,System.String,Lurgle.Alerting.AddressType,System.Boolean,System.String)">
            <summary>
                Instantiate a new email with the desired From address.
                <para />
                Uses <see cref="P:Lurgle.Alerting.AlertConfig.MailFrom" /> if an email is not specified.
            </summary>
            <param name="fromAddress">Email address to send the email from</param>
            <param name="fromName">Display name of the sender</param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <param name="isMethod">Add the calling method to the message text if using <see cref="M:Lurgle.Alerting.Alert.Send(System.String,System.Object[])" /> to send an email</param>
            <param name="methodName">Automatically captures the calling method via [CallerMemberName]</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alert.To(System.String,System.String,Lurgle.Alerting.AddressType,System.Boolean,System.String)">
            <summary>
                Instantiate a new Alert class using the default from address and specified toAddress. You can chain additional
                recipients to this.
                <para />
                Uses <see cref="P:Lurgle.Alerting.AlertConfig.MailFrom" />, and <see cref="P:Lurgle.Alerting.AlertConfig.MailTo" /> if an email is not specified.
            </summary>
            <param name="toAddress">
                Email address to send the email to. Comma- and semicolon-delimited lists can be parsed, but
                toName will then be ignored.
            </param>
            <param name="toName">
                Display name of the recipient. Will be ignored if a comma- or semicolon-delimited toAddress is
                passed
            </param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <param name="isMethod">Add the calling method to the message text if using <see cref="M:Lurgle.Alerting.Alert.Send(System.String,System.Object[])" /> to send an email</param>
            <param name="methodName">Automatically captures the calling method via [CallerMemberName]</param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Alerting.AlertConfig">
            <summary>
                Alerting configuration. Loaded from AppSettings if available but can be configured from code.
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.#ctor">
            <summary>
                AlertConfig constructor
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.#ctor(Lurgle.Alerting.AlertConfig,System.String,System.String,System.Nullable{Lurgle.Alerting.RendererType},System.Nullable{Lurgle.Alerting.SenderType},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{Lurgle.Alerting.TlsOptions},System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
                Constructor that permits passing a config and optional overrides of any property
            </summary>
            <param name="config"></param>
            <param name="appName"></param>
            <param name="appVersion"></param>
            <param name="mailRenderer"></param>
            <param name="mailSender"></param>
            <param name="mailTemplatePath"></param>
            <param name="mailHost"></param>
            <param name="mailUseDns"></param>
            <param name="mailPort"></param>
            <param name="mailTestTimeout"></param>
            <param name="mailUseAuthentication"></param>
            <param name="mailUsername"></param>
            <param name="mailPassword"></param>
            <param name="mailUseTls"></param>
            <param name="mailTimeout"></param>
            <param name="mailFrom"></param>
            <param name="mailTo"></param>
            <param name="mailDebug"></param>
            <param name="mailSubject"></param>
            <param name="mailTlsOptions"></param>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.AppName">
            <summary>
                Meaningful app name that is used for alerting. Will be auto-set if not specified.
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.AppVersion">
            <summary>
                App version will be determined from the binary version, but can be overriden
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailRenderer">
            <summary>
                Set the MailRenderer to use for templates - Razor, Fluid, or Replace
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailSender">
            <summary>
                Set the MailSender to use - SmtpClient or MailKit
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailTemplatePath">
            <summary>
                Set the mail template path. If not specified, will attempt to automatically set to [ExePath]\Templates
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailHost">
            <summary>
                Set one or more SMTP mail hosts, comma-delimited. If not specified, MailUseDns will be assumed.
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailUseDns">
            <summary>
                Use DNS delivery. If set with MailHost, this will be used as a fallback delivery method.
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailPort">
            <summary>
                Set the TCP port for SMTP mail - defaults to 25
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailTestTimeout">
            <summary>
                Interval in seconds for the SMTP test to timeout
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailUseAuthentication">
            <summary>
                Set whether the mail host needs authentication
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailUsername">
            <summary>
                Username for mail host authentication
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailPassword">
            <summary>
                Password for mail host authentication
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailUseTls">
            <summary>
                Enable TLS over SMTP - defaults to false
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailTlsOptions">
            <summary>
                Discrete configuration of TLS - overrides MailUseTls if set
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailTimeout">
            <summary>
                Set the timeout for SMTP sends - defaults to 60 seconds
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailFrom">
            <summary>
                Default From address for emails. Must be set.
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailTo">
            <summary>
                Default To address for emails. Must be set.
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailDebug">
            <summary>
                Default recipient address to substitute if IsDebug is enabled.
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.AlertConfig.MailSubject">
            <summary>
                Default subject for emails. Defaults to "Alert!"
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.GetConfig(Lurgle.Alerting.AlertConfig)">
            <summary>
                Get a config. Optionally a logging config can be passed.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.GetInt(System.Object)">
            <summary>
                Convert the supplied <see cref="T:System.Object" /> to an <see cref="T:System.Int32" />
                <para />
                This will filter out nulls that could otherwise cause exceptions
            </summary>
            <param name="sourceObject">An object that can be converted to an int</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.GetBool(System.Object)">
            <summary>
                Convert the supplied <see cref="T:System.Object" /> to a <see cref="T:System.Boolean" />
                <para />
                This will filter out nulls that could otherwise cause exceptions
            </summary>
            <param name="sourceObject">An object that can be converted to a bool</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.GetTimeout(System.String)">
            <summary>
                Translate a <see cref="T:System.String" /> setting representing seconds to an <see cref="T:System.Int32" />  timeout value representing
                milliseconds
            </summary>
            <param name="timeoutSetting">Timeout setting in seconds</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.GetRenderer(System.String)">
            <summary>
                Parse a config value to a <see cref="T:Lurgle.Alerting.RendererType" />
            </summary>
            <param name="configValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.GetSender(System.String)">
            <summary>
                Parse a config value to a <see cref="T:Lurgle.Alerting.SenderType" />
            </summary>
            <param name="configValue"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.GetEmailTemplate(System.String)">
            <summary>
                Resolve an email template filename from config, given the specified email template name
                <para />
                Config format is EmailTemplate{template}/>
            </summary>
            <param name="template">Email template to return the filename for</param>
        </member>
        <member name="M:Lurgle.Alerting.AlertConfig.GetEmailConfig(System.String)">
            <summary>
                Resolve the email config for a given email type <see cref="T:System.String" />
            </summary>
            <param name="emailType">Email type to retrieve</param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Alerting.Alerting">
            <summary>
                Static Lurgle.Alerting instance that provides an interface to properties and methods for alerting
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alerting.IsDebug">
            <summary>
                If enabled, recipient addresses will be substituted with the configured debug address
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alerting.Config">
            <summary>
                Current Lurgle.Alerting configuration
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Alerting.AlertFailures">
            <summary>
                List of issues found during alerting initialisation
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.Alerting.DnsResolver">
            <summary>
                Static DNS resolver
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Alerting.SetConfig(Lurgle.Alerting.AlertConfig)">
            <summary>
                Set the <see cref="P:Lurgle.Alerting.Alerting.Config" /> by passing an <see cref="T:Lurgle.Alerting.AlertConfig" /> or reading from app config
            </summary>
            <param name="alertConfig"></param>
        </member>
        <member name="M:Lurgle.Alerting.Alerting.SetDebug(System.Boolean)">
            <summary>
                Enable debug mode for email substitution
            </summary>
            <param name="isDebug"></param>
        </member>
        <member name="M:Lurgle.Alerting.Alerting.Init">
            <summary>
                Initialise alerting and test availability of SMTP
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Alerting.TestSmtp(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Test that the SMTP server is reachable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alerting.GetEmailAddress(System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Resolve email addresses using the given <see cref="T:Lurgle.Alerting.AddressType" />
                <para />
                If isDebug is true, emails will automatically be replaced with the configured debug email address.
                <para />
            </summary>
            <param name="emailType">Email config item or email address</param>
            <param name="addressType">Type of email being passed</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alerting.IsValidEmail(System.String)">
            <summary>
                Attempt to resolve an email address as a valid <see cref="T:System.Net.Mail.MailAddress" />
            </summary>
            <param name="emailAddress">Email address to resolve</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alerting.HasValidEmails(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Attempt to resolve an array of email addresses as valid <see cref="T:System.Net.Mail.MailAddress" />
            </summary>
            <param name="emailAddresses">Array of email addresses to resolve</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Alerting.GetEmailTemplate(System.String,System.Boolean)">
            <summary>
                Resolve an email template filename given the specified template string />
            </summary>
            <param name="template">Email template to return the filename for</param>
            <param name="isHtml"></param>
        </member>
        <member name="T:Lurgle.Alerting.Classes.DeliveryAttempt">
            <summary>
                Delivery Attempt record
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.DeliveryAttempt.DeliveryType">
            <summary>
                Type of delivery
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.DeliveryAttempt.MailHost">
            <summary>
                Host attempted
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.DeliveryAttempt.Result">
            <summary>
                Send response
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.Classes.MailResult">
            <summary>
                Record of mail send result, including all results for iteration
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.MailResult.Successful">
            <summary>
                Overall Success / Failure
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.MailResult.DeliveryType">
            <summary>
                Last send's delivery type
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.MailResult.MailHost">
            <summary>
                Last send's mail host
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.MailResult.ErrorMessages">
            <summary>
                Last send's ErrorMessages for backward compatibility
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.MailResult.MessageId">
            <summary>
                Last send's MessageId for backward compatibility
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Classes.MailResult.DeliveryAttempts">
            <summary>
                List of all attempts
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.AddressType">
            <summary>
                Indicate whether an email address passing in to <see cref="T:Lurgle.Alerting.Alert" /> is an actual email address, or if it should be
                queried from the config
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.AddressType.Email">
            <summary>
                Email address
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.AddressType.FromConfig">
            <summary>
                Read from config
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.AlertLevel">
            <summary>
                The priority of the email that will be sent. Abstracts FluentEmail's <see cref="T:FluentEmail.Core.Models.Priority" />  enum so that it does
                not need to be referenced outside of the <see cref="T:Lurgle.Alerting.Alert" />  class.
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.AlertLevel.Normal">
            <summary>
                Normal
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.AlertLevel.Low">
            <summary>
                Low
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.AlertLevel.High">
            <summary>
                High
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.DeliveryType">
            <summary>
                Type of mail delivery
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.DeliveryType.MailHost">
            <summary>
                Delivery via mailhost
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.DeliveryType.MailFallback">
            <summary>
                Delivery via mailhost fallback
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.DeliveryType.Dns">
            <summary>
                Delivery via DNS
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.DeliveryType.DnsFallback">
            <summary>
                Delivery via DNS fallback
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.DeliveryType.HostDnsFallback">
            <summary>
                Delivery via Mailhost DNS fallback
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.DeliveryType.None">
            <summary>
                N/A
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.InitResult">
            <summary>
                Return a reason why initialisation failed
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.InitResult.MailHostNotConfigured">
            <summary>
                Mail host is not configured
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.InitResult.FromAddressEmpty">
            <summary>
                Default From address not configured
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.InitResult.ToAddressEmpty">
            <summary>
                Default To Address not configured
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.InitResult.DebugAddressEmpty">
            <summary>
                Default Debug address not configured
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.InitResult.SubjectEmpty">
            <summary>
                Default subject not configured
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.InitResult.SmtpTestFailed">
            <summary>
                SMTP host test failure
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.RendererType">
            <summary>
                Renderer type to use with email templates
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.RendererType.Razor">
            <summary>
                Use the Razor renderer
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.RendererType.Liquid">
            <summary>
                Use the Liquid (Fluid) renderer
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.RendererType.Fluid">
            <summary>
                Use the Liquid (Fluid) renderer
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.RendererType.Handlebars">
            <summary>
                Use the Handlebars renderer
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.RendererType.Replace">
            <summary>
                Use the default Replace renderer
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.SenderType">
            <summary>
                Send using the old SmtpClient (deprecated) or MailKit
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.SenderType.SmtpClient">
            <summary>
                Use the .NET SmtpClient (deprecate)
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.SenderType.MailKit">
            <summary>
                Use MailKit
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.TlsOptions">
            <summary>
                TLS Options
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.TlsOptions.None">
            <summary>
                None
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.TlsOptions.Auto">
            <summary>
                Auto
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.TlsOptions.SslOnConnect">
            <summary>
                Implicit TLS
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.TlsOptions.StartTls">
            <summary>
                Explicit TLS
            </summary>
        </member>
        <member name="F:Lurgle.Alerting.TlsOptions.StartTlsWhenAvailable">
            <summary>
                Optional TLS
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.Interfaces.IAlert">
            <summary>
                Base Alert interface
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.Interfaces.IEnvelope">
            <summary>
                Envelope interface
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.Attachments">
            <summary>
                List of attachments
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.BccAddresses">
            <summary>
                List of BCC addresses
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.CcAddresses">
            <summary>
                List of CC addresses
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.AlternateView">
            <summary>
                Alternate view for email
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.FromAddress">
            <summary>
                From address
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.IsHtml">
            <summary>
                Is email HTML?
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.AlertPriority">
            <summary>
                Email priority
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.ReplyToAddress">
            <summary>
                Email reply to
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.AlertSubject">
            <summary>
                Email subject
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.ToAddresses">
            <summary>
                List of To addresses
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.IsMethod">
            <summary>
                Add method to body?
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Interfaces.IEnvelope.MethodName">
            <summary>
                Calling method name
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.To(System.String,System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Add a single recipient email address to the alert. You can chain this multiple times.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email.
                <para />
                You can optionally supply key names to retrieve email addresses from the app config.
            </summary>
            <param name="toAddress">
                Email address to send the email to. Comma- and semicolon-delimited lists can be parsed, but
                toName will then be ignored.
            </param>
            <param name="toName">
                Display name of the recipient. Will be ignored if a comma- or semicolon-delimited toAddress is
                passed
            </param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.To(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add an list of email addresses to the recipient field for the alert.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.To(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Add a list of paired email address and name values to the recipient field for the alert.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses and display names as a Dictionary of Key = string, Value = string</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Cc(System.String,System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Add a single CC address to the alert. You can chain this multiple times.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email.
            </summary>
            <param name="ccAddress">
                Email address to send the email to. Comma- and semicolon-delimited lists can be parsed, but
                toName will then be ignored.
            </param>
            <param name="ccName">
                Display name of the recipient. Will be ignored if a comma- or semicolon-delimited toAddress is
                passed
            </param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Cc(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add an array of email addresses to the CC field for the alert
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses in array form</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Cc(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Add a list of paired email address and name values to the CC field for the alert
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses and display names as a Dictionary of Key = string, Value = string</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Bcc(System.String,System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Add a single BCC address to the alert. You can chain this multiple times.
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email.
            </summary>
            <param name="bccAddress">
                Email address to send the email to. Comma- and semicolon-delimited lists can be parsed, but
                toName will then be ignored.
            </param>
            <param name="bccName">
                Display name of the recipient. Will be ignored if a comma- or semicolon-delimited toAddress is
                passed
            </param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Bcc(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add an array of email addresses to the BCC field for this alert
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses in array form</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Bcc(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Add a list of paired email address and name values to the BCC field for the alert
                <para />
                As an optional parameter, this method will not add empty or null addresses to the email
            </summary>
            <param name="emailList">List of email addresses and display names as a Dictionary of Key = string, Value = string</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.ReplyTo(System.String,System.String,Lurgle.Alerting.AddressType)">
            <summary>
                Set the Reply To address for the alert.
                <para />
                If no address is specified, <see cref="P:Lurgle.Alerting.AlertConfig.MailFrom" /> value will be used.
            </summary>
            <param name="replyToAddress">Email address to send replies to.</param>
            <param name="replyToName">Display name of the recipient.</param>
            <param name="addressType">
                Type of email address - defaults to <see cref="F:Lurgle.Alerting.AddressType.Email" /> but accepts
                <see cref="F:Lurgle.Alerting.AddressType.FromConfig" /> to read from config
            </param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Subject(System.String,System.Object[])">
            <summary>
                Set the subject for the alert email.
                <para />
                Passing an empty subjectText will use the <see cref="P:Lurgle.Alerting.AlertConfig.MailSubject" /> .
            </summary>
            <param name="subjectText">Subject to use for the email</param>
            <param name="args">Optional arguments for string replacement"</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Priority(Lurgle.Alerting.AlertLevel)">
            <summary>
                Set the Priority for the alert email.
                <para />
                Emails default to <see cref="F:Lurgle.Alerting.AlertLevel.Normal" />
            </summary>
            <param name="alertLevel">The priority that this email should be sent with</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.SetHtml(System.Boolean)">
            <summary>
                Sets the current email to HTML if true (default).
                Shouldn't be needed any more since we have HTML and alternate text implementations.
            </summary>
            <param name="isHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.AddAlternateView(System.String,System.Collections.Generic.List{System.Net.Mail.LinkedResource})">
            <summary>
                Add the Alt view for the HTML contents.
                Shouldn't typically be needed since we have HTML and alternate text implementations.
            </summary>
            <param name="messageBody"> Message body as string</param>
            <param name="linkedResourceList">List of linked resources</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Attach(System.String,System.String)">
            <summary>
                Attach a file to the alert. You can chain this multiple times.
                <para />
                If the file does not exist, it will be ignored
            </summary>
            <param name="filePath">Path to the file</param>
            <param name="contentType">ContentType, if known (optional)</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Attach(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Attach a list of files to the alert
                <para />
                If any file does not exist, it will be ignored
            </summary>
            <param name="fileList">List of paths to files that will be attached</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Attach(System.IO.Stream,System.String,System.String)">
            <summary>
                Attach a file opened as a stream to the alert
            </summary>
            <param name="fileStream"></param>
            <param name="fileName"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.AttachInline(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Attach an array of files to the alert as inline attachments
                <para />
                If any file does not exist, it will be ignored
            </summary>
            <param name="fileList">Array of paths to files that will be attached</param>
            <param name="folderLocation">Path to folder containing files</param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Send(System.String,System.Object[])">
            <summary>
                Send the alert with the specified message text - assumes plain text
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.Get(System.String,System.Object[])">
            <summary>
                Return a rendered alert email with the specified message text - assumes plain text
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.SendHtml(System.String,System.String,System.Object[])">
            <summary>
                Send the alert with the specified message text and alternate body
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="altMsg">Alternate text body. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.GetHtml(System.String,System.String,System.Object[])">
            <summary>
                Return a rendered alert email with the specified message text and alternate body
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="altMsg">Alternate text body. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.SendAsync(System.String,System.Object[])">
            <summary>
                Send the alert with the specified message text - assumes plain text
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.SendHtmlAsync(System.String,System.String,System.Object[])">
            <summary>
                Send the alert with the specified message text and alternate body
                You can optionally pass a string containing format items, and the replacement objects, and a string.format will be
                applied.
            </summary>
            <param name="msg">Body of the email. Can contain format items for string replacement.</param>
            <param name="altMsg">Alternate text body. Can contain format items for string replacement.</param>
            <param name="args">Optional arguments for string replacement</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.SendTemplate``1(System.String,``0,System.Boolean,System.String)">
            <summary>
                Send the alert using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template and model
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template">Body of the email, using selected <see cref="T:Lurgle.Alerting.RendererType" /> template format and model</param>
            <param name="templateModel">The Model to apply to this template</param>
            <param name="isHtml"></param>
            <param name="alternateTemplate">Alternate text template</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.GetTemplate``1(System.String,``0,System.Boolean,System.String)">
            <summary>
                Return a rendered alert email using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template and model
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template">Body of the email, using selected <see cref="T:Lurgle.Alerting.RendererType" /> template format and model</param>
            <param name="templateModel">The Model to apply to this template</param>
            <param name="isHtml"></param>
            <param name="alternateTemplate">Alternate text template</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.SendTemplateAsync``1(System.String,``0,System.Boolean,System.String)">
            <summary>
                Send the alert using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template and model
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template">Body of the email, using selected <see cref="T:Lurgle.Alerting.RendererType" /> template format and model</param>
            <param name="templateModel">The Model to apply to this template</param>
            <param name="isHtml"></param>
            <param name="alternateTemplate">Alternate text template</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.SendTemplateFile``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
                Send the alert using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file and model
                <para />
                This does not check for the file existence, so a non-existent config item or missing file will cause an exception
                that can be caught.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="templateConfig">Config item to load for the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file</param>
            <param name="templateModel">The Model to apply to this  template</param>
            <param name="isHtml"></param>
            <param name="alternateText">Render the text version of your template as an alternate text</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.GetTemplateFile``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
                Return a rendered alert email using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file and model
                <para />
                This does not check for the file existence, so a non-existent config item or missing file will cause an exception
                that can be caught.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="templateConfig">Config item to load for the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file</param>
            <param name="templateModel">The Model to apply to this  template</param>
            <param name="isHtml"></param>
            <param name="alternateText">Render the text version of your template as an alternate text</param>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IEnvelope.SendTemplateFileAsync``1(System.String,``0,System.Boolean,System.Boolean)">
            <summary>
                Send the alert using the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file and model
                <para />
                This does not check for the file existence, so a non-existent config item or missing file will cause an exception
                that can be caught.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="templateConfig">Config item to load for the selected <see cref="T:Lurgle.Alerting.RendererType" /> template file</param>
            <param name="templateModel">The Model to apply to this  template</param>
            <param name="isHtml"></param>
            <param name="alternateText">Render the text version of your template as an alternate text</param>
        </member>
        <member name="T:Lurgle.Alerting.Interfaces.IHideObjectMembers">
            <summary>
                Hide object members
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IHideObjectMembers.GetType">
            <summary>
                Override GetType visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IHideObjectMembers.GetHashCode">
            <summary>
                Override GetHashCode visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IHideObjectMembers.ToString">
            <summary>
                Override ToString visibility
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Interfaces.IHideObjectMembers.Equals(System.Object)">
            <summary>
                Override Equals visibility
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Alerting.Renderers.HandlebarsRenderer">
            <summary>
                Handlebars Renderer, based off https://github.com/matthewturner/FluentEmail.Handlebars
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.HandlebarsRenderer.#ctor">
            <summary>
                Handlebars Renderer constructor
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.HandlebarsRenderer.#ctor(System.String)">
            <summary>
                Handlebars Renderer constructor
            </summary>
            <param name="templateRoot"></param>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.HandlebarsRenderer.ParseAsync``1(System.String,``0,System.Boolean)">
            <summary>
                Async parse implementation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <param name="isHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.HandlebarsRenderer.FluentEmail#Core#Interfaces#ITemplateRenderer#Parse``1(System.String,``0,System.Boolean)">
            <summary>
                Parse implementation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="template"></param>
            <param name="model"></param>
            <param name="isHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.HandlebarsRenderer.RegisterTemplatesFrom(System.String)">
            <summary>
                Register template implementation
            </summary>
            <param name="templateRoot"></param>
        </member>
        <member name="T:Lurgle.Alerting.Renderers.InMemoryRazorLightProject">
            <summary>
                In memory RazorLight project
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.InMemoryRazorLightProject.GetItemAsync(System.String)">
            <summary>
                Get template key
            </summary>
            <param name="templateKey"></param>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.InMemoryRazorLightProject.GetImportsAsync(System.String)">
            <summary>
                Get imports
            </summary>
            <param name="templateKey"></param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Alerting.Renderers.IViewBagModel">
            <summary>
                Viewbag model
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Renderers.IViewBagModel.ViewBag">
            <summary>
                Viewbag
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.Renderers.LiquidRenderer">
            <summary>
                Liquid Renderer
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.LiquidRenderer.#ctor(Microsoft.Extensions.Options.IOptions{Lurgle.Alerting.Renderers.LiquidRendererOptions})">
            <summary>
                Liquid Renderer
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.LiquidRenderer.Parse``1(System.String,``0,System.Boolean)">
            <summary>
                Parse Liquid template
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="isHtml"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.LiquidRenderer.ParseAsync``1(System.String,``0,System.Boolean)">
            <summary>
                Parse Liquid template
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="isHtml"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Alerting.Renderers.LiquidRendererOptions">
            <summary>
                Liquid Renderer Options
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Renderers.LiquidRendererOptions.ConfigureTemplateContext">
            <summary>
                Allows configuring template context before running the template. Parameters are context that has been
                prepared and the model that is going to be used.
            </summary>
            <remarks>
                This API creates dependency on Fluid.
            </remarks>
        </member>
        <member name="P:Lurgle.Alerting.Renderers.LiquidRendererOptions.TextEncoder">
            <summary>
                Text encoder to use. Defaults to <see cref="T:System.Text.Encodings.Web.HtmlEncoder" />.
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Renderers.LiquidRendererOptions.FileProvider">
            <summary>
                File provider to use, used when resolving references in templates, like master layout.
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Renderers.LiquidRendererOptions.TemplateOptions">
            <summary>
                Set custom Template Options for Fluid
            </summary>
        </member>
        <member name="T:Lurgle.Alerting.Renderers.RazorRenderer">
            <summary>
                Razor renderer
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.RazorRenderer.#ctor(System.String)">
            <summary>
                Razor renderer
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.RazorRenderer.#ctor(RazorLight.Razor.RazorLightProject)">
            <summary>
                Razor renderer
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.RazorRenderer.#ctor(System.Type)">
            <summary>
                Razor renderer
            </summary>
            <param name="embeddedResRootType"></param>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.RazorRenderer.ParseAsync``1(System.String,``0,System.Boolean)">
            <summary>
                Parse Razor template
            </summary>
            <param name="template"></param>
            <param name="model"></param>
            <param name="isHtml"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Lurgle.Alerting.Renderers.RazorRenderer.GetHashString(System.String)">
            <summary>
                Get SHA256 hash
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="T:Lurgle.Alerting.Senders.MailKitSender">
            <summary>
                Send emails with the MailKit Library.
            </summary>
        </member>
        <member name="M:Lurgle.Alerting.Senders.MailKitSender.#ctor(Lurgle.Alerting.Senders.SmtpClientOptions)">
            <summary>
                Creates a sender that uses the given SmtpClientOptions when sending with MailKit. Since the client is internal this
                will dispose of the client.
            </summary>
            <param name="smtpClientOptions">The SmtpClientOptions to use to create the MailKit client</param>
        </member>
        <member name="M:Lurgle.Alerting.Senders.MailKitSender.Send(FluentEmail.Core.IFluentEmail,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Send the specified email.
            </summary>
            <returns>A response with any errors and a success boolean.</returns>
            <param name="email">Email.</param>
            <param name="token">Cancellation Token.</param>
        </member>
        <member name="M:Lurgle.Alerting.Senders.MailKitSender.SendAsync(FluentEmail.Core.IFluentEmail,System.Nullable{System.Threading.CancellationToken})">
            <summary>
                Send the specified email.
            </summary>
            <returns>A response with any errors and a success boolean.</returns>
            <param name="email">Email.</param>
            <param name="token">Cancellation Token.</param>
        </member>
        <member name="M:Lurgle.Alerting.Senders.MailKitSender.SaveToPickupDirectory(MimeKit.MimeMessage,System.String)">
            <summary>
                Saves email to a pickup directory.
            </summary>
            <param name="message">Message to save for pickup.</param>
            <param name="pickupDirectory">Pickup directory.</param>
        </member>
        <member name="M:Lurgle.Alerting.Senders.MailKitSender.CreateMailMessage(FluentEmail.Core.IFluentEmail)">
            <summary>
                Create a MimMessage so MailKit can send it
            </summary>
            <returns>The mail message.</returns>
            <param name="email">Email data.</param>
        </member>
        <member name="T:Lurgle.Alerting.Senders.SmtpClientOptions">
            <summary>
                SMTP Client Options
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.Server">
            <summary>
                Server
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.Port">
            <summary>
                Port
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.User">
            <summary>
                Username
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.Password">
            <summary>
                Password
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.UseSsl">
            <summary>
                UseSsl (SocketOptions is preferable)
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.RequiresAuthentication">
            <summary>
                Use authentication
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.PreferredEncoding">
            <summary>
                Preferred Encoding
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.UsePickupDirectory">
            <summary>
                Enable pickup directory
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.MailPickupDirectory">
            <summary>
                Mail pickup directory
            </summary>
        </member>
        <member name="P:Lurgle.Alerting.Senders.SmtpClientOptions.SocketOptions">
            <summary>
                Secure socket options
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FluentEmailFluidBuilderExtensions">
            <summary>
                FluentEmail Fluid/Liquid Builder Extensions
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FluentEmailFluidBuilderExtensions.AddLiquidRenderer(Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder,System.Action{Lurgle.Alerting.Renderers.LiquidRendererOptions})">
            <summary>
                Liquid Renderer
            </summary>
            <param name="builder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FluentEmailHandlebarsBuilderExtensions">
            <summary>
                Handlebars builder extensions, based off https://github.com/matthewturner/FluentEmail.Handlebars
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FluentEmailHandlebarsBuilderExtensions.AddHandlebarsRenderer(Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder)">
            <summary>
                Add Handlebars renderer
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FluentEmailHandlebarsBuilderExtensions.AddHandlebarsRenderer(Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder,System.String)">
            <summary>
                Automatically loads templates from the specified directory
            </summary>
            <param name="builder"></param>
            <param name="templateRoot"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FluentEmailRazorBuilderExtensions">
            <summary>
                FluentEmail Razor Extensions
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FluentEmailRazorBuilderExtensions.AddRazorRenderer(Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder)">
            <summary>
                Add Razor renderer
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FluentEmailRazorBuilderExtensions.AddRazorRenderer(Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder,System.String)">
            <summary>
                Add razor renderer with project views and layouts
            </summary>
            <param name="builder"></param>
            <param name="templateRootFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FluentEmailRazorBuilderExtensions.AddRazorRenderer(Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder,System.Type)">
            <summary>
                Add razor renderer with embedded views and layouts
            </summary>
            <param name="builder"></param>
            <param name="embeddedResourceRootType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FluentEmailRazorBuilderExtensions.AddRazorRenderer(Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder,RazorLight.Razor.RazorLightProject)">
            <summary>
                Add razor renderer with a RazorLightProject to support views and layouts
            </summary>
            <param name="builder"></param>
            <param name="razorLightProject"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.FluentEmailMailKitBuilderExtensions">
            <summary>
                FluentEmail MailKit extensions
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.FluentEmailMailKitBuilderExtensions.AddMailKitSender(Microsoft.Extensions.DependencyInjection.FluentEmailServicesBuilder,Lurgle.Alerting.Senders.SmtpClientOptions)">
            <summary>
                MailKit sender
            </summary>
            <param name="builder"></param>
            <param name="smtpClientOptions"></param>
            <returns></returns>
        </member>
        <member name="T:LiquidParser">
            <summary>
                Liquid Parser
            </summary>
        </member>
        <member name="M:LiquidParser.#ctor">
            <summary>
                Liquid Parser
            </summary>
        </member>
    </members>
</doc>
